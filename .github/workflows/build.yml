name: .NET Core Build and Deploy

on:
  push:
    branches:
    - master
    paths-ignore:
    - '**/*.md'
    - '**/*.gitignore'
    - '**/*.gitattributes'
    - '**/*.all-contributorsrc'
  workflow_dispatch:
    branches:
    - master
    paths-ignore:
    - '**/*.md'
    - '**/*.gitignore'
    - '**/*.gitattributes'
    - '**/*.all-contributorsrc'

jobs:
  build:
    outputs:
      version: ${{ steps.set_proj_version.outputs.PKG_VERSION }}
      relnotes: ${{ steps.set_proj_version.outputs.RELNOTES }}
    name: Build and package 
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.8.0
      with:
        dotnet-version: 6.0.x

    - name: Restore
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    # Run the tests, ideally should stop here if a fail and also publish results as artifacts
    - name: Test
      uses: timheuer/dotnet-tests-report@master
      with:
        project_path: Alexa.NET.Tests/Alexa.NET.Tests.csproj
        report_name: alexa_net_tests
        report_title: Alexa.NET Tests
        github_token: ${{ secrets.GITHUB_TOKEN }}
        set_check_status_from_test_outcome: true

    - name: Pack
      run: dotnet pack --configuration Release -o finalpackage --no-build

    - name: Publish artifact
      uses: actions/upload-artifact@master
      with:
        name: nupkg
        path: finalpackage

    - name: Get version
      id: set_proj_version
      shell: pwsh
      run: |
        [xml]$nuspec = Get-Content Alexa.NET\Alexa.NET.csproj
        $version=$nuspec.project.propertygroup.versionprefix
        $relnotes=$nuspec.project.propertygroup.packagereleasenotes
        Write-Output "::set-output name=PKG_VERSION::$version"
        Write-Output "::set-output name=RELNOTES::$relnotes"

  deploy:
    needs: build
    environment:
      name: production
      url: https://www.nuget.org/packages/Alexa.NET/
    name: Sign and publish
    runs-on: windows-latest # using windows agent due to nuget can't sign on linux yet
    steps:
      - name: Download Package artifact
        uses: actions/download-artifact@v2
        with:
          name: nupkg
      
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
        with:
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
          nuget-version: latest

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.8.0
        with:
          dotnet-version: 6.0.x
          include-prerelease: true

      - name: Get certificate
        id: cert_file
        uses: timheuer/base64-to-file@master
        with:
          fileName: 'certfile.pfx'
          encodedString: ${{ secrets.SIGNING_CERT }}
      
      # Sign the package
      - name: Sign NuGet Package
        #run: nuget sign **/*.nupkg -CertificatePath ${{ steps.cert_file.outputs.filePath }} -CertificatePassword ${{ secrets.CERT_PWD }}  -Timestamper http://timestamp.digicert.com -NonInteractive
        run: dotnet nuget sign **/*.nupkg --certificate-path ${{ steps.cert_file.outputs.filePath }} --certificate-password ${{ secrets.CERT_PWD }} --timestamper http://timestamp.digicert.com
      
      - name: Push to NuGet
        run: dotnet nuget push **/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Add GPR Source
        #run: nuget sources Add -Name "GPR" -Source ${{ secrets.GPR_URI }} -UserName ${{ secrets.GPR_USERNAME }} -Password ${{ secrets.GITHUB_TOKEN }}
        run: dotnet nuget add source --username ${{ secrets.GPR_USERNAME }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name GPR ${{ secrets.GPR_URI }}

      - name: Push to GitHub Packages
        #run: nuget push **/*.nupkg -Source "GPR" -SkipDuplicate
        run: dotnet nuget push **/*.nupkg -s "GPR" --skip-duplicate

      - name: Tag and Release
        id: tag_release
        uses: softprops/action-gh-release@v0.1.13
        with:
          body: ${{ needs.build.outputs.relnotes }}
          tag_name: ${{ needs.build.outputs.version }}
          files: |
            **/*.nupkg

      - name: Publish signed artifact
        uses: actions/upload-artifact@v2
        with:
          name: signednupkg
          path: .
          
  announce:
    needs: [build,deploy]
    environment:
      name: announcement
      url: ${{ steps.send_tweet.outputs.tweeturl }}
    if: ${{ contains(toJson(github.event.commits),'[skip announce]') == false }}
    name: Tweet release
    runs-on: ubuntu-latest
    steps:
      - name: Tweet release detail
        id: send_tweet
        uses: timheuer/send-tweet-action@master
        with:
          status: "Alexa.NET ${{ needs.build.outputs.version }} was just released!  https://github.com/timheuer/alexa-skills-dotnet/ Thanks to all the contributors!"
          consumer-key: ${{ secrets.TWITTER_API_KEY }}
          consumer-secret: ${{ secrets.TWITTER_API_SECRET }}
          access-token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          access-token-secret: ${{ secrets.TWITTER_ACCESS_SECRET }}
